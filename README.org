* shelf
A list of blog posts, videos, exercises on various tech topics that I find useful.

** Productivity
*** Org mode
 * [[https://www.youtube.com/watch?v=oJTwQvgfgMM][Emacs Org-mode - a system for note-taking and project planning - Carsten Dominik]]
   An introduction to emacs org mode by the creator Carsten Dominik
   himself. This was a part of the google tech talks 2008. This is a
   very simple but comprehensive talk on why org mode exists and how to
   use it.
 * [[https://www.youtube.com/watch?v=SzA2YODtgK4][Getting Started With Org Mode]] - [[https://harryrschwartz.com/][Harry Schwartz]]
   This is a getting started guide on what org mode is and some of the
   crazy stuff you can get done using org mode on emacs.
 * [[https://orgmode.org/orgguide.pdf][orgmode guide]]

** System Design
*** System Architecture
 * [[http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions][Documenting Architecture Decisions - Michael Nygard]]

*** Concurrency
 * [[http://java.ociweb.com/mark/stm/article.html][Software Transactional Memory]]

*** Distributed Systems
 * [[https://github.com/theanalyst/awesome-distributed-systems][Awesome Distributed Systems]]
 * [[https://www.allthingsdistributed.com/2007/10/amazons_dynamo.html][Amazon's Dynamo]]
 * [[http://firmament.io/blog/scheduler-architectures.html][Cluster Scheduler Architecture]]
 * [[https://www.youtube.com/watch?v=fU9hR3kiOK0][Turning the database inside out with Apache Samza by Martin Kleppmann]]
 * [[https://www.youtube.com/watch?v=yO3SBU6vVKA][Building real-time data products at LinkedIn with Apache Samza]]
**** Kubernetes
 * [[https://kubernetes.io/docs/home/?path=users&persona=app-developer&level=foundational][Kubernetes Documentation]]
 * [[https://www.youtube.com/watch?v=pozC9rBvAIs][Managing Containers at Scale with CoreOS and Kubernetes by Kelsey Hightower]]
 * [[https://www.youtube.com/watch?v=tA8XNVPZM2w][Container Orchestration using CoreOS and Kubernetes, Part 1/3]] - [[https://www.youtube.com/watch?v=I9pF-Bv8AkI][Part 2/3]] - [[https://www.youtube.com/watch?v=UZbwDH-_a_M][Part 3/3]]

*** Scalability
 * [[https://github.com/binhnguyennus/awesome-scalability][Awesome Scalability]]
 * [[https://vincent.bernat.ch/en/blog/2014-tcp-time-wait-state-linux][TCP Time Wait state on linux]]
 * [[https://www.infoq.com/articles/Java-Thread-Pool-Performance-Tuning][Java Thread Pool Performance Tuning]]
   * [[https://en.wikipedia.org/wiki/Little's_law][Little's Law - Wikipedia]]

*** Experimentation - A/B Testing
 * [[https://static.googleusercontent.com/media/research.google.com/en/us/pubs/archive/36500.pdf][Overlapping Experiment Infrastructure: More, Better, Faster Experimentation - Google]]
 * [[https://ai.stanford.edu/~ronnyk/2007GuideControlledExperiments.pdf][Practical Guide to Controlled Experiments on the Web: Listen to Your Customers not to the HiPPO - Microsft]]
 * [[http://ai.stanford.edu/~ronnyk/2009controlledExperimentsOnTheWebSurvey.pdf][Controlled experiments on the web: survey and practical guide - Ron Kohavi, et al]]
 * [[https://content.linkedin.com/content/dam/engineering/site-assets/pdfs/ABTestingSocialNetwork_share.pdf][A/B Testing Challenges in Large Scale Social Networks - Linkedin]]
 * [[https://www.researchgate.net/publication/324889185_The_Anatomy_of_a_Large-Scale_Online_Experimentation_Platform][The Anatomy of a Large-Scale Online Experimentation Platform - Microsft]]
 * [[https://medium.com/netflix-techblog/its-all-a-bout-testing-the-netflix-experimentation-platform-4e1ca458c15][Netflix Experimentaiton Platform]]
 * [[https://medium.com/airbnb-engineering/https-medium-com-jonathan-parks-scaling-erf-23fd17c91166][Scaling Airbnbâ€™s Experimentation Platform]]
 * [[https://medium.com/airbnb-engineering/experiment-reporting-framework-4e3fcd29e6c0][Experiment Reporting Framework - Airbnb]]
 * [[https://exp-platform.com/Documents/2017-05%20ICSE2017_CharacterizingExP.pdf][Characterizing Experimentation in Continuous Deployment: a Case Study on Bing - Microsoft]]
 * [[https://eng.uber.com/experimentation-platform/][Building an Intelligent Experimentation Platform with Uber Engineering]]
 * [[https://assets.ctfassets.net/zw48pl1isxmc/6bUM4v36PCuAcScwiCIcAC/d17ec7521608974479c3cf5b67f9232e/Optimizely_12.26_Yearly_Article_License.pdf][The Surprising Power of Online Experiments - Harvard Business Review]]
 * [[https://www.youtube.com/watch?v=AJX4W3MwKzU][Stanford Seminar: Peeking at A/B Tests - Why It Matters and What to Do About It]]
 * More
   * [[https://en.wikipedia.org/wiki/A/B_testing][A/B Testing - Wikipedia]]
   * [[https://en.wikipedia.org/wiki/Null_hypothesis][Null Hypothesis - Wikipedia]]
   * [[https://en.wikipedia.org/wiki/Stratified_sampling][Stratified Sampling - Wikipedia]]

** Databases
*** Postgresql
 * [[https://www.youtube.com/watch?v=svqQzYFBPIo][Explaining the Postgres Query Optimizer]] - [[https://momjian.us/][Bruce Momjian]]
 * [[https://www.youtube.com/watch?v=byl_CoucJE0][MVCC Unmasked]] - [[https://momjian.us/main/writings/pgsql/mvcc.pdf][slides]] - [[https://momjian.us/][Bruce Momjian]]
 * [[https://www.citusdata.com/blog/2016/03/30/five-ways-to-paginate/][Five ways to paginate in Postgres, from the basic to the exotic - Joe Nelson]]
   An interesting and detailed blog on 5 different ways to serve
   paginated responses while using postgresql as your datastore.
 * [[https://wiki.postgresql.org/wiki/Tuning_Your_PostgreSQL_Server][Tuning your postgresql server]]
 * [[https://wiki.postgresql.org/wiki/Performance_Optimization][Performance Optimization]]
 * [[https://www.youtube.com/watch?v=xAT6OZ9Xel4][A scalable, versioned document store in PostgreSQL]]
   This is talk at the 2018 PostgresOpen which talks about how Udacity
   maintains their whole curriculum in a postgres database while allowing
   for versioning of changes in their tree like data model. It's a very
   informative talk, if not for postgres but how they modeled a git like
   semantics in postgres
 * [[https://www.youtube.com/user/postgresopen][ANSI, Schmansi!]]
   The not so ANSI SQL features that postgres provides that makes it a better
   whole round database and that might nudge you into using postgres or even
   using postgres in a better way. This is just an overall walk through of
   such features. Quite a bit that I personally wasn't aware of.
 * [[https://www.youtube.com/watch?v=yhOkob2PQFQ][Identifying Slow Queries and Fixing Them!]]
   This talk revolves around methods of identifying slow queries like logs,
   tools and in build postgres shared libs. Then it focuses on the reasons
   why there could be slow queries in the first place. And lastly on to what
   are the ways these could be avoided. This is not a very specific use case
   fix my all problem guide but an overall where all to look guide.
 * [[https://devcenter.heroku.com/articles/postgresql-concurrency][PostgreSQL Concurrency with MVCC - Heroku]]
 * [[https://blog.sentry.io/2015/07/23/transaction-id-wraparound-in-postgres.html][Transaction ID Wraparound in Postgres - Sentry]]
 * [[https://blog.gojekengineering.com/postgres-autovacuum-tuning-394bb99fe2c0][Tuning Postgres Autovacuum for Scale - Gojek]]
 * [[https://wiki.postgresql.org/wiki/Lock_Monitoring][Lock Monitoring - postgresql wiki]]
 * Tools
   * [[https://pgtune.leopard.in.ua/#/][pgtune]] - Tune your postgresql instance better
   * [[http://pgbadger.darold.net/][pgBadger]] - postgres log analyser
   * [[https://www.postgresql.org/docs/10/static/pgbench.html][pgbench]] - benchmark postgres
   * [[https://explain.depesz.com/][explain.depesz.com]] - better understand your query plan

*** MySQL
 * [[https://grimoire.ca/mysql/choose-something-else][Choose Something Else]]

*** Redis
 * [[https://redis.io/topics/cluster-tutorial][Redis Cluster]]
 * [[https://redis.io/topics/persistence][Persistence]]

** Programming Languages
*** Clojure
 * [[https://github.com/bbatsov/clojure-style-guide][Clojure Style Guide]] - [[https://github.com/bbatsov][@bbatsov]]
 * [[https://re-find.it/][Find clojure functions that does a given data transformation]]
 * [[http://clojure-doc.org/articles/language/concurrency_and_parallelism.html][Concurrency & Parallelism in Clojure]]
 * [[https://clojure.org/guides/spec][Clojure Spec]]
 * [[https://vimeo.com/45561411][Reducers - Rich Hickey @ EuroClojure 2012]]
   A great talk by Rich Hickey on why he wrote reducers and why you would
   want to use them. His example of apples -> apple pie is a great analogy
   on why you would want to use reducers in your applications.

*** Go
 * [[https://github.com/golang/go/wiki/CodeReviewComments][Go Code Review Comments]]
 * [[https://about.sourcegraph.com/go/gophercon-2018-allocator-wrestling/][Gophercon 2018 - Allocator Wrestling]]

** Misc
 * [[https://www.youtube.com/watch?v=o_4EX4dPppA][The Hard Parts of Open Source - Evan Czaplicki]]
 * [[https://samnewman.io/patterns/architectural/bff/][Backend For Frontend - Sam Newman]]
 * [[http://playbook.samaltman.com/][Startup Playbook - Sam Altman]]
 * [[https://teachyourselfcs.com/][Teach Yourself Computer Science]]
   A collection of materials(books, online course etc) to help grasp the
   concepts of computer science. This mostly takes you down the general
   course material for computer science degree.
